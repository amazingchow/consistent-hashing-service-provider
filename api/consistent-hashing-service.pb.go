// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: github.com/amazingchow/photon-dance-consistent-hashing/pb/consistent-hashing-service.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SenderType int32

const (
	// used to record operation logs.
	SenderType_SENDER_TYPE_CLIENT SenderType = 0
	// used to replay operation logs.
	SenderType_SENDER_TYPE_OPLOG SenderType = 1
)

// Enum value maps for SenderType.
var (
	SenderType_name = map[int32]string{
		0: "SENDER_TYPE_CLIENT",
		1: "SENDER_TYPE_OPLOG",
	}
	SenderType_value = map[string]int32{
		"SENDER_TYPE_CLIENT": 0,
		"SENDER_TYPE_OPLOG":  1,
	}
)

func (x SenderType) Enum() *SenderType {
	p := new(SenderType)
	*p = x
	return p
}

func (x SenderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SenderType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_enumTypes[0].Descriptor()
}

func (SenderType) Type() protoreflect.EnumType {
	return &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_enumTypes[0]
}

func (x SenderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SenderType.Descriptor instead.
func (SenderType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP(), []int{0}
}

type Shard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base64 code of machine ip or hostname.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Keys []*Key `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *Shard) Reset() {
	*x = Shard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shard) ProtoMessage() {}

func (x *Shard) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shard.ProtoReflect.Descriptor instead.
func (*Shard) Descriptor() ([]byte, []int) {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP(), []int{0}
}

func (x *Shard) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Shard) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string               `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	CreateTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP(), []int{1}
}

func (x *Key) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Key) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Key) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// ---------- request + response ----------
type AddShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender   SenderType `protobuf:"varint,1,opt,name=sender,proto3,enum=amazingchow.photon_dance_consistent_hashing.SenderType" json:"sender,omitempty"`
	ToRecord bool       `protobuf:"varint,2,opt,name=to_record,json=toRecord,proto3" json:"to_record,omitempty"`
	ToReplay bool       `protobuf:"varint,3,opt,name=to_replay,json=toReplay,proto3" json:"to_replay,omitempty"`
	Shard    *Shard     `protobuf:"bytes,4,opt,name=shard,proto3" json:"shard,omitempty"`
}

func (x *AddShardRequest) Reset() {
	*x = AddShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShardRequest) ProtoMessage() {}

func (x *AddShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShardRequest.ProtoReflect.Descriptor instead.
func (*AddShardRequest) Descriptor() ([]byte, []int) {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP(), []int{2}
}

func (x *AddShardRequest) GetSender() SenderType {
	if x != nil {
		return x.Sender
	}
	return SenderType_SENDER_TYPE_CLIENT
}

func (x *AddShardRequest) GetToRecord() bool {
	if x != nil {
		return x.ToRecord
	}
	return false
}

func (x *AddShardRequest) GetToReplay() bool {
	if x != nil {
		return x.ToReplay
	}
	return false
}

func (x *AddShardRequest) GetShard() *Shard {
	if x != nil {
		return x.Shard
	}
	return nil
}

type AddShardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddShardResponse) Reset() {
	*x = AddShardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShardResponse) ProtoMessage() {}

func (x *AddShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShardResponse.ProtoReflect.Descriptor instead.
func (*AddShardResponse) Descriptor() ([]byte, []int) {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP(), []int{3}
}

type AddShardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender   SenderType `protobuf:"varint,1,opt,name=sender,proto3,enum=amazingchow.photon_dance_consistent_hashing.SenderType" json:"sender,omitempty"`
	ToRecord bool       `protobuf:"varint,2,opt,name=to_record,json=toRecord,proto3" json:"to_record,omitempty"`
	ToReplay bool       `protobuf:"varint,3,opt,name=to_replay,json=toReplay,proto3" json:"to_replay,omitempty"`
	Shards   []*Shard   `protobuf:"bytes,4,rep,name=shards,proto3" json:"shards,omitempty"`
}

func (x *AddShardsRequest) Reset() {
	*x = AddShardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShardsRequest) ProtoMessage() {}

func (x *AddShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShardsRequest.ProtoReflect.Descriptor instead.
func (*AddShardsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP(), []int{4}
}

func (x *AddShardsRequest) GetSender() SenderType {
	if x != nil {
		return x.Sender
	}
	return SenderType_SENDER_TYPE_CLIENT
}

func (x *AddShardsRequest) GetToRecord() bool {
	if x != nil {
		return x.ToRecord
	}
	return false
}

func (x *AddShardsRequest) GetToReplay() bool {
	if x != nil {
		return x.ToReplay
	}
	return false
}

func (x *AddShardsRequest) GetShards() []*Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

type AddShardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddShardsResponse) Reset() {
	*x = AddShardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddShardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShardsResponse) ProtoMessage() {}

func (x *AddShardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShardsResponse.ProtoReflect.Descriptor instead.
func (*AddShardsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP(), []int{5}
}

type DeleteShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender   SenderType `protobuf:"varint,1,opt,name=sender,proto3,enum=amazingchow.photon_dance_consistent_hashing.SenderType" json:"sender,omitempty"`
	ToRecord bool       `protobuf:"varint,2,opt,name=to_record,json=toRecord,proto3" json:"to_record,omitempty"`
	ToReplay bool       `protobuf:"varint,3,opt,name=to_replay,json=toReplay,proto3" json:"to_replay,omitempty"`
	Uuid     string     `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DeleteShardRequest) Reset() {
	*x = DeleteShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShardRequest) ProtoMessage() {}

func (x *DeleteShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShardRequest.ProtoReflect.Descriptor instead.
func (*DeleteShardRequest) Descriptor() ([]byte, []int) {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteShardRequest) GetSender() SenderType {
	if x != nil {
		return x.Sender
	}
	return SenderType_SENDER_TYPE_CLIENT
}

func (x *DeleteShardRequest) GetToRecord() bool {
	if x != nil {
		return x.ToRecord
	}
	return false
}

func (x *DeleteShardRequest) GetToReplay() bool {
	if x != nil {
		return x.ToReplay
	}
	return false
}

func (x *DeleteShardRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DeleteShardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteShardResponse) Reset() {
	*x = DeleteShardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShardResponse) ProtoMessage() {}

func (x *DeleteShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShardResponse.ProtoReflect.Descriptor instead.
func (*DeleteShardResponse) Descriptor() ([]byte, []int) {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP(), []int{7}
}

type ListShardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListShardsRequest) Reset() {
	*x = ListShardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShardsRequest) ProtoMessage() {}

func (x *ListShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShardsRequest.ProtoReflect.Descriptor instead.
func (*ListShardsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP(), []int{8}
}

type ListShardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shards []*Shard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
}

func (x *ListShardsResponse) Reset() {
	*x = ListShardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShardsResponse) ProtoMessage() {}

func (x *ListShardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShardsResponse.ProtoReflect.Descriptor instead.
func (*ListShardsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListShardsResponse) GetShards() []*Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

type MapKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender   SenderType `protobuf:"varint,1,opt,name=sender,proto3,enum=amazingchow.photon_dance_consistent_hashing.SenderType" json:"sender,omitempty"`
	ToRecord bool       `protobuf:"varint,2,opt,name=to_record,json=toRecord,proto3" json:"to_record,omitempty"`
	ToReplay bool       `protobuf:"varint,3,opt,name=to_replay,json=toReplay,proto3" json:"to_replay,omitempty"`
	Key      *Key       `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *MapKeyRequest) Reset() {
	*x = MapKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapKeyRequest) ProtoMessage() {}

func (x *MapKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapKeyRequest.ProtoReflect.Descriptor instead.
func (*MapKeyRequest) Descriptor() ([]byte, []int) {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP(), []int{10}
}

func (x *MapKeyRequest) GetSender() SenderType {
	if x != nil {
		return x.Sender
	}
	return SenderType_SENDER_TYPE_CLIENT
}

func (x *MapKeyRequest) GetToRecord() bool {
	if x != nil {
		return x.ToRecord
	}
	return false
}

func (x *MapKeyRequest) GetToReplay() bool {
	if x != nil {
		return x.ToReplay
	}
	return false
}

func (x *MapKeyRequest) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

type MapKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shard *Shard `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
}

func (x *MapKeyResponse) Reset() {
	*x = MapKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapKeyResponse) ProtoMessage() {}

func (x *MapKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapKeyResponse.ProtoReflect.Descriptor instead.
func (*MapKeyResponse) Descriptor() ([]byte, []int) {
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP(), []int{11}
}

func (x *MapKeyResponse) GetShard() *Shard {
	if x != nil {
		return x.Shard
	}
	return nil
}

var File_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto protoreflect.FileDescriptor

var file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDesc = []byte{
	0x0a, 0x5a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6d, 0x61,
	0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2d,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x2d, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x61, 0x6d,
	0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x05, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63,
	0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x91, 0x01,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63,
	0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x48, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe9,
	0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f,
	0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x4a,
	0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x64,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb3, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67,
	0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x60, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e,
	0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63,
	0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x42, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x5a, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63,
	0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x2a, 0x3b, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x4c, 0x4f, 0x47, 0x10, 0x01, 0x32, 0xd8, 0x05,
	0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x08, 0x41,
	0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x3c, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e,
	0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63,
	0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x3d, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77,
	0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x90, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x12, 0x3f, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x40, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77,
	0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x3e, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f,
	0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f,
	0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12,
	0x3a, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61,
	0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x6d,
	0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68,
	0x6f, 0x77, 0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x2d, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2d,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescOnce sync.Once
	file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescData = file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDesc
)

func file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescGZIP() []byte {
	file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescOnce.Do(func() {
		file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescData)
	})
	return file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDescData
}

var file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_goTypes = []interface{}{
	(SenderType)(0),             // 0: amazingchow.photon_dance_consistent_hashing.SenderType
	(*Shard)(nil),               // 1: amazingchow.photon_dance_consistent_hashing.Shard
	(*Key)(nil),                 // 2: amazingchow.photon_dance_consistent_hashing.Key
	(*AddShardRequest)(nil),     // 3: amazingchow.photon_dance_consistent_hashing.AddShardRequest
	(*AddShardResponse)(nil),    // 4: amazingchow.photon_dance_consistent_hashing.AddShardResponse
	(*AddShardsRequest)(nil),    // 5: amazingchow.photon_dance_consistent_hashing.AddShardsRequest
	(*AddShardsResponse)(nil),   // 6: amazingchow.photon_dance_consistent_hashing.AddShardsResponse
	(*DeleteShardRequest)(nil),  // 7: amazingchow.photon_dance_consistent_hashing.DeleteShardRequest
	(*DeleteShardResponse)(nil), // 8: amazingchow.photon_dance_consistent_hashing.DeleteShardResponse
	(*ListShardsRequest)(nil),   // 9: amazingchow.photon_dance_consistent_hashing.ListShardsRequest
	(*ListShardsResponse)(nil),  // 10: amazingchow.photon_dance_consistent_hashing.ListShardsResponse
	(*MapKeyRequest)(nil),       // 11: amazingchow.photon_dance_consistent_hashing.MapKeyRequest
	(*MapKeyResponse)(nil),      // 12: amazingchow.photon_dance_consistent_hashing.MapKeyResponse
	(*timestamp.Timestamp)(nil), // 13: google.protobuf.Timestamp
}
var file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_depIdxs = []int32{
	2,  // 0: amazingchow.photon_dance_consistent_hashing.Shard.keys:type_name -> amazingchow.photon_dance_consistent_hashing.Key
	13, // 1: amazingchow.photon_dance_consistent_hashing.Key.create_time:type_name -> google.protobuf.Timestamp
	13, // 2: amazingchow.photon_dance_consistent_hashing.Key.update_time:type_name -> google.protobuf.Timestamp
	0,  // 3: amazingchow.photon_dance_consistent_hashing.AddShardRequest.sender:type_name -> amazingchow.photon_dance_consistent_hashing.SenderType
	1,  // 4: amazingchow.photon_dance_consistent_hashing.AddShardRequest.shard:type_name -> amazingchow.photon_dance_consistent_hashing.Shard
	0,  // 5: amazingchow.photon_dance_consistent_hashing.AddShardsRequest.sender:type_name -> amazingchow.photon_dance_consistent_hashing.SenderType
	1,  // 6: amazingchow.photon_dance_consistent_hashing.AddShardsRequest.shards:type_name -> amazingchow.photon_dance_consistent_hashing.Shard
	0,  // 7: amazingchow.photon_dance_consistent_hashing.DeleteShardRequest.sender:type_name -> amazingchow.photon_dance_consistent_hashing.SenderType
	1,  // 8: amazingchow.photon_dance_consistent_hashing.ListShardsResponse.shards:type_name -> amazingchow.photon_dance_consistent_hashing.Shard
	0,  // 9: amazingchow.photon_dance_consistent_hashing.MapKeyRequest.sender:type_name -> amazingchow.photon_dance_consistent_hashing.SenderType
	2,  // 10: amazingchow.photon_dance_consistent_hashing.MapKeyRequest.key:type_name -> amazingchow.photon_dance_consistent_hashing.Key
	1,  // 11: amazingchow.photon_dance_consistent_hashing.MapKeyResponse.shard:type_name -> amazingchow.photon_dance_consistent_hashing.Shard
	3,  // 12: amazingchow.photon_dance_consistent_hashing.ConsistentHashingService.AddShard:input_type -> amazingchow.photon_dance_consistent_hashing.AddShardRequest
	5,  // 13: amazingchow.photon_dance_consistent_hashing.ConsistentHashingService.AddShards:input_type -> amazingchow.photon_dance_consistent_hashing.AddShardsRequest
	7,  // 14: amazingchow.photon_dance_consistent_hashing.ConsistentHashingService.DeleteShard:input_type -> amazingchow.photon_dance_consistent_hashing.DeleteShardRequest
	9,  // 15: amazingchow.photon_dance_consistent_hashing.ConsistentHashingService.ListShards:input_type -> amazingchow.photon_dance_consistent_hashing.ListShardsRequest
	11, // 16: amazingchow.photon_dance_consistent_hashing.ConsistentHashingService.MapKey:input_type -> amazingchow.photon_dance_consistent_hashing.MapKeyRequest
	4,  // 17: amazingchow.photon_dance_consistent_hashing.ConsistentHashingService.AddShard:output_type -> amazingchow.photon_dance_consistent_hashing.AddShardResponse
	6,  // 18: amazingchow.photon_dance_consistent_hashing.ConsistentHashingService.AddShards:output_type -> amazingchow.photon_dance_consistent_hashing.AddShardsResponse
	8,  // 19: amazingchow.photon_dance_consistent_hashing.ConsistentHashingService.DeleteShard:output_type -> amazingchow.photon_dance_consistent_hashing.DeleteShardResponse
	10, // 20: amazingchow.photon_dance_consistent_hashing.ConsistentHashingService.ListShards:output_type -> amazingchow.photon_dance_consistent_hashing.ListShardsResponse
	12, // 21: amazingchow.photon_dance_consistent_hashing.ConsistentHashingService.MapKey:output_type -> amazingchow.photon_dance_consistent_hashing.MapKeyResponse
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() {
	file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_init()
}
func file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_init() {
	if File_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddShardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteShardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_goTypes,
		DependencyIndexes: file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_depIdxs,
		EnumInfos:         file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_enumTypes,
		MessageInfos:      file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_msgTypes,
	}.Build()
	File_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto = out.File
	file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_rawDesc = nil
	file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_goTypes = nil
	file_github_com_amazingchow_photon_dance_consistent_hashing_pb_consistent_hashing_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConsistentHashingServiceClient is the client API for ConsistentHashingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsistentHashingServiceClient interface {
	AddShard(ctx context.Context, in *AddShardRequest, opts ...grpc.CallOption) (*AddShardResponse, error)
	AddShards(ctx context.Context, in *AddShardsRequest, opts ...grpc.CallOption) (*AddShardsResponse, error)
	DeleteShard(ctx context.Context, in *DeleteShardRequest, opts ...grpc.CallOption) (*DeleteShardResponse, error)
	ListShards(ctx context.Context, in *ListShardsRequest, opts ...grpc.CallOption) (*ListShardsResponse, error)
	MapKey(ctx context.Context, in *MapKeyRequest, opts ...grpc.CallOption) (*MapKeyResponse, error)
}

type consistentHashingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsistentHashingServiceClient(cc grpc.ClientConnInterface) ConsistentHashingServiceClient {
	return &consistentHashingServiceClient{cc}
}

func (c *consistentHashingServiceClient) AddShard(ctx context.Context, in *AddShardRequest, opts ...grpc.CallOption) (*AddShardResponse, error) {
	out := new(AddShardResponse)
	err := c.cc.Invoke(ctx, "/amazingchow.photon_dance_consistent_hashing.ConsistentHashingService/AddShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consistentHashingServiceClient) AddShards(ctx context.Context, in *AddShardsRequest, opts ...grpc.CallOption) (*AddShardsResponse, error) {
	out := new(AddShardsResponse)
	err := c.cc.Invoke(ctx, "/amazingchow.photon_dance_consistent_hashing.ConsistentHashingService/AddShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consistentHashingServiceClient) DeleteShard(ctx context.Context, in *DeleteShardRequest, opts ...grpc.CallOption) (*DeleteShardResponse, error) {
	out := new(DeleteShardResponse)
	err := c.cc.Invoke(ctx, "/amazingchow.photon_dance_consistent_hashing.ConsistentHashingService/DeleteShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consistentHashingServiceClient) ListShards(ctx context.Context, in *ListShardsRequest, opts ...grpc.CallOption) (*ListShardsResponse, error) {
	out := new(ListShardsResponse)
	err := c.cc.Invoke(ctx, "/amazingchow.photon_dance_consistent_hashing.ConsistentHashingService/ListShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consistentHashingServiceClient) MapKey(ctx context.Context, in *MapKeyRequest, opts ...grpc.CallOption) (*MapKeyResponse, error) {
	out := new(MapKeyResponse)
	err := c.cc.Invoke(ctx, "/amazingchow.photon_dance_consistent_hashing.ConsistentHashingService/MapKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsistentHashingServiceServer is the server API for ConsistentHashingService service.
type ConsistentHashingServiceServer interface {
	AddShard(context.Context, *AddShardRequest) (*AddShardResponse, error)
	AddShards(context.Context, *AddShardsRequest) (*AddShardsResponse, error)
	DeleteShard(context.Context, *DeleteShardRequest) (*DeleteShardResponse, error)
	ListShards(context.Context, *ListShardsRequest) (*ListShardsResponse, error)
	MapKey(context.Context, *MapKeyRequest) (*MapKeyResponse, error)
}

// UnimplementedConsistentHashingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConsistentHashingServiceServer struct {
}

func (*UnimplementedConsistentHashingServiceServer) AddShard(context.Context, *AddShardRequest) (*AddShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShard not implemented")
}
func (*UnimplementedConsistentHashingServiceServer) AddShards(context.Context, *AddShardsRequest) (*AddShardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShards not implemented")
}
func (*UnimplementedConsistentHashingServiceServer) DeleteShard(context.Context, *DeleteShardRequest) (*DeleteShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShard not implemented")
}
func (*UnimplementedConsistentHashingServiceServer) ListShards(context.Context, *ListShardsRequest) (*ListShardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShards not implemented")
}
func (*UnimplementedConsistentHashingServiceServer) MapKey(context.Context, *MapKeyRequest) (*MapKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapKey not implemented")
}

func RegisterConsistentHashingServiceServer(s *grpc.Server, srv ConsistentHashingServiceServer) {
	s.RegisterService(&_ConsistentHashingService_serviceDesc, srv)
}

func _ConsistentHashingService_AddShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsistentHashingServiceServer).AddShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/amazingchow.photon_dance_consistent_hashing.ConsistentHashingService/AddShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsistentHashingServiceServer).AddShard(ctx, req.(*AddShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsistentHashingService_AddShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsistentHashingServiceServer).AddShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/amazingchow.photon_dance_consistent_hashing.ConsistentHashingService/AddShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsistentHashingServiceServer).AddShards(ctx, req.(*AddShardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsistentHashingService_DeleteShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsistentHashingServiceServer).DeleteShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/amazingchow.photon_dance_consistent_hashing.ConsistentHashingService/DeleteShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsistentHashingServiceServer).DeleteShard(ctx, req.(*DeleteShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsistentHashingService_ListShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsistentHashingServiceServer).ListShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/amazingchow.photon_dance_consistent_hashing.ConsistentHashingService/ListShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsistentHashingServiceServer).ListShards(ctx, req.(*ListShardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsistentHashingService_MapKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsistentHashingServiceServer).MapKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/amazingchow.photon_dance_consistent_hashing.ConsistentHashingService/MapKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsistentHashingServiceServer).MapKey(ctx, req.(*MapKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConsistentHashingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "amazingchow.photon_dance_consistent_hashing.ConsistentHashingService",
	HandlerType: (*ConsistentHashingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddShard",
			Handler:    _ConsistentHashingService_AddShard_Handler,
		},
		{
			MethodName: "AddShards",
			Handler:    _ConsistentHashingService_AddShards_Handler,
		},
		{
			MethodName: "DeleteShard",
			Handler:    _ConsistentHashingService_DeleteShard_Handler,
		},
		{
			MethodName: "ListShards",
			Handler:    _ConsistentHashingService_ListShards_Handler,
		},
		{
			MethodName: "MapKey",
			Handler:    _ConsistentHashingService_MapKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/amazingchow/photon-dance-consistent-hashing/pb/consistent-hashing-service.proto",
}
